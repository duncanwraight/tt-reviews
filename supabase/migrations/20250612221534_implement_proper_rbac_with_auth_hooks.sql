-- Implement proper RBAC following Supabase best practices
-- Based on: https://supabase.com/docs/guides/database/postgres/custom-claims-and-role-based-access-control-rbac

-- Custom types for our application
DO $$ BEGIN
    CREATE TYPE public.app_role AS ENUM ('user', 'admin', 'moderator');
EXCEPTION
    WHEN duplicate_object THEN null;
END $$;

-- USER ROLES table (separate from profiles)
CREATE TABLE IF NOT EXISTS public.user_roles (
  id        bigint generated by default as identity primary key,
  user_id   uuid references auth.users on delete cascade not null,
  role      app_role not null,
  unique (user_id, role)
);
COMMENT ON TABLE public.user_roles IS 'Application roles for each user.';

-- Enable RLS
ALTER TABLE public.user_roles ENABLE ROW LEVEL SECURITY;

-- Create Auth Hook to add user_role to JWT claims
CREATE OR REPLACE FUNCTION public.custom_access_token_hook(event jsonb)
RETURNS jsonb
LANGUAGE plpgsql
STABLE
AS $$
  DECLARE
    claims jsonb;
    user_role public.app_role;
  BEGIN
    -- Fetch the user role in the user_roles table
    SELECT role INTO user_role FROM public.user_roles WHERE user_id = (event->>'user_id')::uuid;
    
    claims := event->'claims';
    
    IF user_role IS NOT NULL THEN
      -- Set the claim
      claims := jsonb_set(claims, '{user_role}', to_jsonb(user_role));
    ELSE
      claims := jsonb_set(claims, '{user_role}', '"user"');
    END IF;
    
    -- Update the 'claims' object in the original event
    event := jsonb_set(event, '{claims}', claims);
    
    -- Return the modified event
    RETURN event;
  END;
$$;

-- Grant permissions for the auth hook
GRANT usage ON schema public TO supabase_auth_admin;

GRANT execute
  ON function public.custom_access_token_hook
  TO supabase_auth_admin;

REVOKE execute
  ON function public.custom_access_token_hook
  FROM authenticated, anon, public;

GRANT all
  ON table public.user_roles
  TO supabase_auth_admin;

REVOKE all
  ON table public.user_roles
  FROM authenticated, anon, public;

-- Policy to allow auth admin to read user roles
CREATE POLICY "Allow auth admin to read user roles" ON public.user_roles
AS permissive FOR select
TO supabase_auth_admin
USING (true);

-- Update profiles table to use JWT claims for admin access
DROP POLICY IF EXISTS "Users can view own profile" ON public.profiles;
DROP POLICY IF EXISTS "Admins can view all profiles" ON public.profiles;
DROP POLICY IF EXISTS "Admins can update profiles" ON public.profiles;

-- Create new policies using JWT claims
CREATE POLICY "Users can view own profile" ON public.profiles
  FOR SELECT USING (auth.uid() = id);

CREATE POLICY "Admins can view all profiles" ON public.profiles
  FOR SELECT USING ((auth.jwt() ->> 'user_role') = 'admin');

CREATE POLICY "Admins can update profiles" ON public.profiles
  FOR UPDATE USING ((auth.jwt() ->> 'user_role') = 'admin');

-- Insert role for existing users (migrate from profiles.role to user_roles)
INSERT INTO public.user_roles (user_id, role)
SELECT id, role::app_role
FROM public.profiles 
WHERE role IN ('admin', 'moderator')
ON CONFLICT (user_id, role) DO NOTHING;

-- Insert default user role for users without specific roles
INSERT INTO public.user_roles (user_id, role)
SELECT id, 'user'::app_role
FROM public.profiles 
WHERE role IS NULL OR role = 'user'
ON CONFLICT (user_id, role) DO NOTHING;